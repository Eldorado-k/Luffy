import random
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from helper.database import db
from config import Config, Txt

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message):
    user = message.from_user
    await db.add_user(client, message)
    
    # Liste des stickers et messages interm√©diaires
    sequence = [
        {"type": "message", "text": "‚ú® Salut. Je suis Luffy. Le chef de l'√©quipage au chapeau de pailleüòÅ...."},
        {"type": "sticker", "id": "CAACAgQAAxkBAAI3VWhpJkh1GJkxjq7ciOKcTHlAQ28BAALkFQACfqTJUVt-EzCZ0Ol6HgQ"},  # ID du 1er sticker
        {"type": "message", "text": " Moi mon r√™ve √† moi, c'est de trouver le One piece qu'elle qu'en soit le Prixüí• ..."},
        {"type": "sticker", "id": "CAACAgQAAxkBAAI3VWhpJkh1GJkxjq7ciOKcTHlAQ28BAALkFQACfqTJUVt-EzCZ0Ol6HgQ"},  # ID du 2√®me sticker
        {"type": "message", "text": " Et je  deviendrai le Roi des Pirates ..."},
        {"type": "sticker", "id": "CAACAgQAAxkBAAI3VWhpJkh1GJkxjq7ciOKcTHlAQ28BAALkFQACfqTJUVt-EzCZ0Ol6HgQ"}   # ID du 3√®me sticker
    ]
    
    # Envoyer et supprimer les √©l√©ments un par un
    for item in sequence:
        if item["type"] == "message":
            sent_item = await message.reply_text(item["text"])
        else:
            sent_item = await message.reply_sticker(item["id"])
        
        await asyncio.sleep(2)  # Attendre 2 secondes
        await sent_item.delete()
        await asyncio.sleep(0.3)  # Petit d√©lai entre les √©l√©ments
    
    # Envoyer le vrai message de d√©marrage apr√®s la s√©quence
    button = InlineKeyboardMarkup([[
        InlineKeyboardButton("C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ D·¥á·¥†", callback_data='dev')
        ],[
        InlineKeyboardButton('M…™s·¥á √† ·¥ä·¥è·¥ú Ä', url='https://t.me/BotZFlix'),
        InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ', url='https://t.me/BTZF_CHAT')
        ],[
        InlineKeyboardButton('√Ä P Ä·¥è·¥ò·¥ès', callback_data='about'),
        InlineKeyboardButton('A…™·¥Ö·¥á', callback_data='help')
    ]])
    
    if Config.START_PIC:
        await message.reply_photo(Config.START_PIC, caption=Txt.START_TXT.format(user.mention), reply_markup=button)       
    else:
        await message.reply_text(text=Txt.START_TXT.format(user.mention), reply_markup=button, disable_web_page_preview=True)
   

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data 
    if data == "start":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ D·¥á·¥†", callback_data='dev')
                ],[
                InlineKeyboardButton('M…™s·¥á √† ·¥ä·¥è·¥ú Ä', url='https://t.me/BotZFlix'),
                InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ', url='https://t.me/BZFT_CHAT')
                ],[
                InlineKeyboardButton('√Ä P Ä·¥è·¥ò·¥ès', callback_data='about'),
                InlineKeyboardButton('A…™·¥Ö·¥á', callback_data='help')
            ]])
        )
    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ù£Ô∏è Code Source", url="https://github.com/TEAM-PYRO-BOTZ/PYRO-RENAME-BOT")
                ],[
                InlineKeyboardButton("‚ù§Ô∏è‚Äçüî• Tutoriel", url='https://youtu.be/4ZfvMSDXBVg')
                ],[
                InlineKeyboardButton("üîí Fermer", callback_data="close"),
                InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="start")
            ]])            
        )
    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT.format(client.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ù£Ô∏è Code Source", callback_data="dev")
                ],[
                InlineKeyboardButton("S·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/BTFZ_CHAT")
                ],[
                InlineKeyboardButton("Òë†† ZF ü…™x-T·¥á·¥Ä·¥ç", callback_data="zft"),
                InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="start")
            ]])            
        )
    elif data == "zft":
        await query.message.edit_text(
            text=Txt.ZFT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ù£Ô∏è Rejoindre ", url="https://t.me/ZFlixTeam")
                ],[
                InlineKeyboardButton("üéå Contact", url="https://t.me/ZFlixTeamBot")
                ],[
                InlineKeyboardButton("üîí Fermer", callback_data="close"),
                InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="start")
            ]])          
        )
    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            await query.message.delete()